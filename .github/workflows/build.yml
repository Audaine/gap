name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  # Indicates the location of the vcpkg as a Git submodule of the project repository.
  VCPKG_ROOT: ${{ github.workspace }}/vcpkg
  # Tells vcpkg where binary packages are stored.
  VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache

jobs:
  build:
    runs-on: ubuntu-latest
    
    matrix:
      vcpkgCommitId: 5568f110b509a9fd90711978a7cb76bae75bb092
    
    timeout-minutes: 15

    steps:
    - uses: actions/checkout@v2
      with:
          submodules: true
          
    - name: "Create directory '${{ env.VCPKG_DEFAULT_BINARY_CACHE }}'"
      run: mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
      shell: bash
    
    - name: Restore artifacts, or setup vcpkg
      uses: lukka/get-cmake@latest
    
    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v10
      with:
        vcpkgGitCommitId: '${{ matrix.vcpkgCommitId }}'
        vcpkgJsonGlob: 'vcpkg.json'

    - name: Run CMake consuming CMakePreset.json and vcpkg.json by mean of vcpkg.
      uses: lukka/run-cmake@v10
        with:
          # This is the name of the CMakePresets.json's configuration to use to generate
          # the project files. This configuration leverages the vcpkg.cmake toolchain file to
          # run vcpkg and install all dependencies specified in vcpkg.json.
          configurePreset: 'ninja-multi-vcpkg'

          # This is the name of the CMakePresets.json's configuration to build the project.
          buildPreset: 'ninja-multi-vcpkg'     
